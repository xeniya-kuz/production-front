# name: listing, testing, building
# run-name: ${{ github.actor }} is testing out GitHub Actions ðŸš€
# on: 
#   push:
#     branches: [ main ]
#   pull_request:
#     branches: [ main ]
# jobs:
#   pipeline-test:
#     runs-on: windows-latest
#     strategy:
#       matrix:
#         node-version: [ 20.x ]
#     steps:
#      - uses: actions/checkout@v4
#      - name: Starting Node.js ${{ matrix.node-version }}
#        uses: actions/setup-node@v3
#        with:
#          node-version: ${{ matrix.node-version }}
#      - name: install modules
#        run: npm install
#      - name: production build
#        if: always()
#        run: npm run build:prod
#      - name: fix linting typescript
#        if: always()
#        run: npm run lint:ts:fix
#      - name: fix linting scss
#        if: always()
#        run: npm run lint:scss:fix
#      - name: unit testing
#        if: always()
#        run: npm run test:jest

#      - name: build storybook
#        if: always()
#        run: npm run storybook:build
#      - name: screenshot testing
#        if: always()
#        run: npm run test:loki:ci
#      - name: upload loki artifact on failure
#        if: failure()
#        uses: actions/upload-artifact@v4
#        with:
#         name: loki-artifact
#         path: .loki
#         overwrite: true
#         include-hidden-files: true


name: linting, testing, building
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
permissions:
  contents: write
  pages: write
  id-token: write
concurrency:
  group: "pages"
  cancel-in-progress: true
jobs:
  build-and-ui-testing:
    runs-on: windows-latest
    concurrency: ci-${{ github.ref }}
    environment:
        name: github-pages
        url: ${{ steps.deployment.outputs.page_url }}
    strategy:
      matrix:
        node-version: [ 20.x ]
    steps:
      - uses: actions/checkout@v4
      - name: Staring Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: install modules
        run: npm ci
      - name: production build
        run: npm run build:prod
        if: always()
      - name: Build storybook
        run: npm run storybook:build
        if: always()
      # - name: Start Storybook server
      #   run: npx start-storybook -p 6006 -c ./config/storybook -h 0.0.0.0 &
      #     npx wait-on http://192.168.100.7:6006
      # - name: Screenshot testing
      #   # run: npm run test:loki:ci
      #   run: npx loki --requireReference --reactUri http://192.168.100.7:6006
      #   if: always()
      - name: Start Storybook and run Loki
        shell: bash
        run: npx start-storybook -p 6006 -c ./config/storybook -h 0.0.0.0 & STORYBOOK_PID=$! npx wait-on http://localhost:6006 npx loki --requireReference --reactUri http://192.168.100.7:6006   kill $STORYBOOK_PID
      - name: generate HTML report
        run: npm run test:loki:report
        if: always()
      - name: setup Pages
        uses: actions/configure-pages@v2
        if: always()
      - name: upload artifact
        uses: actions/upload-pages-artifact@v4
        if: always()
        with:
          path: '.loki'
      - name: deploy to GitHub Pages
        id: deployment
        if: always()
        uses: actions/deploy-pages@v4

  checks:
    runs-on: windows-latest
    strategy:
      matrix:
        node-version: [ 20.x ]
    steps:
      - uses: actions/checkout@v4
      - name: Staring Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
      - name: install modules
        run: npm ci
      - name: fix linting typescript
        run: npm run lint:ts:fix
        if: always()
      - name: fix linting scss
        run: npm run lint:scss:fix
      - name: unit testing
        if: always()
        run: npm run test:jest
